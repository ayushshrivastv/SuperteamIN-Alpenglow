\* Author: Ayush Srivastava
SPECIFICATION Spec

CONSTANTS
    \* Small validator set for exhaustive checking
    Validators = {v1, v2, v3}
    ByzantineValidators = {}
    OfflineValidators = {}
    
    \* Minimal slots and views for quick testing
    MaxSlot = 5
    MaxView = 3
    MaxTime = 15
    
    \* Stake distribution - function mapping validators to stake amounts
    Stake = [v1 |-> 10, v2 |-> 10, v3 |-> 10]
    
    \* Network parameters
    GST = 0
    Delta = 1
    MaxMessageSize = 100
    NetworkCapacity = 3000
    MaxBufferSize = 50
    PartitionTimeout = 5
    \* Additional Network module constants
    MaxNetworkDelay = 3
    MessageLossRate = 0
    NetworkPartitions = {}
    RecoveryTimeout = 10
    MaxRetransmissions = 3
    
    \* Erasure coding parameters (Rotor)
    K = 2
    N = 3
    MaxBlocks = 5
    BandwidthLimit = 5000
    RetryTimeout = 2
    MaxRetries = 2
    
    \* Block and transaction limits
    MaxBlockSize = 100
    BandwidthPerValidator = 1000
    MaxTransactions = 10
    
    \* Protocol parameters (Votor)
    TimeoutDelta = 5
    InitialLeader = v1
    FastPathStake = 24  \* 80% of total stake 30
    SlowPathStake = 18  \* 60% of total stake 30
    SkipPathStake = 18  \* 60% of total stake 30
    \* LeaderFunction - fixed TLC syntax (simplified for model checking)
    LeaderFunction = v1
    
    \* Cryptographic abstractions
    MaxSignatures = 20
    MaxCertificates = 10

\* State constraints for bounded model checking
CONSTRAINT StateConstraint

\* Properties to check (using corrected certificate references)
INVARIANT TypeOK
INVARIANT Safety
INVARIANT ChainConsistency
INVARIANT CertificateUniqueness
INVARIANT ConsistentFinalization
INVARIANT DeliveredBlocksConsistency

PROPERTY Progress
PROPERTY FastPath
PROPERTY BoundedFinalization

\* Symmetry reduction (only for non-Byzantine, non-offline validators)
\* Since ByzantineValidators = {} and OfflineValidators = {}, all are symmetric except leader
SYMMETRY Permutations({v2, v3})

\* Action constraints (fixed syntax)
ACTION_CONSTRAINT ActionConstraint

\* Initial state predicates
INIT Init

\* Next-state relation  
NEXT Next

\* View for checking (enhanced for better state space exploration)
\* Using currentSlot and clock for state differentiation
VIEW <<currentSlot, clock, Cardinality(finalizedBlocks[currentSlot])>>
