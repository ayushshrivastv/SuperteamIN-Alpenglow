\* TLC Configuration for Whitepaper Validation
\* Small-scale exhaustive model checking of Alpenglow consensus protocol

SPECIFICATION Alpenglow

\* Small validator set for exhaustive checking
CONSTANTS
    Validators = {v1, v2, v3, v4, v5}
    ByzantineValidators = {v5}
    OfflineValidators = {}
    MaxSlot = 10
    MaxView = 5
    GST = 5
    Delta = 2
    InitialLeader = v1
    K = 3
    N = 5
    BandwidthLimit = 1000
    MaxRetries = 3

\* Stake distribution: v1=40%, v2=20%, v3=20%, v4=10%, v5=10% (Byzantine)
CONSTANTS
    Stake = [v1 |-> 40, v2 |-> 20, v3 |-> 20, v4 |-> 10, v5 |-> 10]

\* Timing parameters for realistic but small-scale testing
CONSTANTS
    FastPathTimeout = 1
    SlowPathTimeout = 2
    LeaderWindowSize = 4
    MaxSlicesPerBlock = 4
    MinRelaysPerSlice = 2
    MinHonestRelays = 2
    ReconstructionThreshold = 3

\* Type invariants to check
INVARIANTS
    TypeOK
    VotorRotorIntegration
    DeliveredBlocksConsistency

\* Safety properties from the specification
PROPERTIES
    Safety
    CertificateUniqueness
    ChainConsistency
    ConsistentFinalization
    RotorNonEquivocation

\* Liveness properties
PROPERTIES
    Progress
    FastPath
    BoundedFinalization
    BlockDeliveryGuarantee

\* Resilience properties
PROPERTIES
    ByzantineResilience
    OfflineResilience
    PartitionRecovery
    Combined2020Resilience

\* Integration properties
PROPERTIES
    RotorVotorIntegration
    StakeProportionalBandwidth

\* Whitepaper theorems (if available in imported modules)
PROPERTIES
    WhitepaperSafetyTheorem
    WhitepaperLivenessTheorem

\* State space constraints for manageable model checking
CONSTRAINTS
    StateConstraint
    ActionConstraint

\* Action constraints to limit state explosion
ACTION_CONSTRAINTS
    currentSlot <= MaxSlot
    \A v \in Validators : votorView[v] <= MaxView
    clock <= 50
    Cardinality(messages) <= 100

\* View constraints for exhaustive checking
VIEW_CONSTRAINTS
    \A v \in Validators : votorView[v] <= 3
    currentSlot <= 5

\* Symmetry reduction on honest validator identities
SYMMETRY
    Symmetry

\* Enable deadlock detection
CHECK_DEADLOCK

\* Fairness conditions for liveness checking
FAIRNESS
    Fairness

\* Model checking parameters
ALIAS
    clock_alias = clock
    slot_alias = currentSlot
    views_alias = [v \in Validators |-> votorView[v]]
    finalized_alias = [s \in 1..MaxSlot |-> Cardinality(finalizedBlocks[s])]

\* Coverage metrics
COVERAGE
    \* Track certificate generation
    cert_coverage = Cardinality(UNION {votorGeneratedCerts[vw] : vw \in 1..MaxView})
    \* Track finalization progress
    finalization_coverage = Cardinality({s \in 1..MaxSlot : finalizedBlocks[s] # {}})
    \* Track Byzantine behavior
    byzantine_coverage = Cardinality({v \in ByzantineValidators : votorView[v] > 0})

\* Trace validation
TRACE_EXPRESSIONS
    clock
    currentSlot
    [v \in Validators |-> votorView[v]]
    [s \in 1..currentSlot |-> Cardinality(finalizedBlocks[s])]

\* Performance tuning for small model
INIT_NEXT_OPTIMIZATION
    \* Optimize initial state exploration
    INIT_STATES_LIMIT = 1000
    \* Limit next-state exploration depth
    NEXT_STATES_LIMIT = 10000

\* Error trace configuration
ERROR_TRACE
    \* Generate detailed traces for property violations
    DETAILED_TRACE = TRUE
    \* Include state variable values in traces
    INCLUDE_VARIABLES = TRUE

\* Verification targets
VERIFICATION_GOALS
    \* Primary safety goal: no conflicting finalizations
    SAFETY_GOAL = ConsistentFinalization
    \* Primary liveness goal: eventual progress
    LIVENESS_GOAL = Progress
    \* Byzantine resilience goal: safety under 20% Byzantine stake
    RESILIENCE_GOAL = ByzantineResilience

\* Model statistics collection
STATISTICS
    \* Track state space size
    STATES_EXPLORED = TRUE
    \* Track property checking time
    PROPERTY_TIME = TRUE
    \* Track memory usage
    MEMORY_USAGE = TRUE