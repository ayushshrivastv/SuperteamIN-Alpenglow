\* Author: Ayush Srivastava
\* TLC Configuration for Whitepaper Validation
\* Small-scale exhaustive model checking of Alpenglow consensus protocol

SPECIFICATION Alpenglow

\* Small validator set for exhaustive checking
CONSTANTS
    Validators = {v1, v2, v3, v4, v5}
    ByzantineValidators = {v5}
    OfflineValidators = {}
    MaxSlot = 10
    MaxView = 5
    GST = 5
    Delta = 2
    InitialLeader = v1
    K = 3
    N = 5
    BandwidthLimit = 1000
    MaxRetries = 3
    Stake = [v1 |-> 40, v2 |-> 20, v3 |-> 20, v4 |-> 10, v5 |-> 10]
    FastPathTimeout = 1
    SlowPathTimeout = 2
    LeaderWindowSize = 4
    MaxSlicesPerBlock = 4
    MinRelaysPerSlice = 2
    MinHonestRelays = 2
    ReconstructionThreshold = 3

\* Type invariants to check
INVARIANTS
    TypeOK
    VotorRotorIntegration
    DeliveredBlocksConsistency

\* Safety and liveness properties from the specification
PROPERTIES
    Safety
    CertificateUniqueness
    ChainConsistency
    ConsistentFinalization
    RotorNonEquivocation
    Progress
    FastPath
    BoundedFinalization
    BlockDeliveryGuarantee
    ByzantineResilience
    OfflineResilience
    PartitionRecovery
    Combined2020Resilience
    RotorVotorIntegration
    StakeProportionalBandwidth
    WhitepaperSafetyTheorem
    WhitepaperLivenessTheorem

\* State space constraints for manageable model checking
CONSTRAINTS
    StateConstraint
    ActionConstraint

\* Action constraints to limit state explosion
ACTION_CONSTRAINT
    /\ currentSlot <= MaxSlot
    /\ \A v \in Validators : votorView[v] <= MaxView
    /\ clock <= 50
    /\ Cardinality(messages) <= 100

\* Symmetry reduction on honest validator identities
SYMMETRY
    Symmetry

\* Enable deadlock detection
CHECK_DEADLOCK TRUE

\* Fairness conditions for liveness checking
FAIRNESS
    WF_vars(Next)

\* Model checking parameters
ALIAS
    clock_alias = clock
    slot_alias = currentSlot
    views_alias = [v \in Validators |-> votorView[v]]
    finalized_alias = [s \in 1..MaxSlot |-> Cardinality(finalizedBlocks[s])]

